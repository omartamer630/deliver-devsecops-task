version: 0.2
env:
  variables: 
    TERRAFORM_VERSION: "1.5.6"
phases:
  install:
    runtime-versions:
      python: 3.12
    
    on-failure: ABORT
    commands: |
      echo "Installing terraform"
      apt-get install -y wget unzip 
      apt-get clean all
      tf_version=$TERRAFORM_VERSION
      wget https://releases.hashicorp.com/terraform/"$TERRAFORM_VERSION"/terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
      unzip terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
      chmod 775 terraform
      mv terraform /usr/local/bin/
      terraform --version
      rm terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
      ls -al /usr/local/bin/terraform
      echo "Installing Checkov components"
      apt-get install python -y
      pip install --no-input checkov
      pip install --upgrade --no-input urllib3
      apt-get install jq -y

  pre_build:
    on-failure: ABORT
    commands: |
      echo "Pre-build stage"
  build:
    on-failure: ABORT
    commands: |
      if [ "$STAGE_TYPE" = "plan" ]; then
        echo "Plan Stage"
        ls -lathr;
        terraform init;
        terraform validate;
        echo "Generating TFPlan.."
        terraform plan -out tfplan;
      elif [ "$STAGE_TYPE" = "scan" ]; then
        echo "Plan Scan"
        ls -lathr;
        terraform init;
        terraform plan -out tfplan;
        terraform show -json tfplan | jq '.' > tfplan.json;
        checkov -f tfplan.json;
      else
        echo "No Plan, or Scan Stages"
      fi
  post_build:
    on-failure: CONTINUE
    commands: |
      if [ "$STAGE_TYPE" = "apply" ]; then
        echo  "Apply stage";
        ls -lathr;
        terraform apply tfplan;
      else
        echo "No Apply stage";
        echo "Fetching provisioning details"
        terraform show -json tfplan > tfplan.json
        apt-get install -y jq
        echo "print out terrafrom version and json format version"
        jq '.terraform_version, .format_version' tfplan.json
        echo ""
        echo "print out provider config"
        jq '.configuration.provider_config' tfplan.json
        echo ""
        echo "print out resource config"
        jq '.configuration.root_module.resources' tfplan.json
        echo ""
        echo "print out outputs"
        jq '.outputs' tfplan.json
        echo ""
        echo "print out resource changes"
        jq '.resource_changes' tfplan.json
        echo ""
        echo "print out resource config"
        jq '.configuration.root_module.resources' tfplan.json
        echo ""
        echo "print out lock file configuration"
        jq '.configuration.lock_version' tfplan.json
      fi
artifacts:
  files:
    - output/**/*
