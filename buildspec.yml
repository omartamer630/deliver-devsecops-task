version: 0.2
env:
  variables: 
    TERRAFORM_VERSION: "1.5.6"
    PIP_CACHE_DIR: "/tmp/pip-cache"

phases:
  install:
    runtime-versions:
      python: 3.12
    
    on-failure: ABORT
    commands: |
      # Create cache directory if it doesn't exist
      mkdir -p /tmp/terraform_binaries/
      
      # Check if terraform binary already exists in cache
      if [ -f "/tmp/terraform_binaries/terraform_$TERRAFORM_VERSION" ]; then
        echo "Using cached Terraform binary"
        cp /tmp/terraform_binaries/terraform_$TERRAFORM_VERSION /usr/local/bin/terraform
        chmod 775 /usr/local/bin/terraform
      else
        echo "Installing terraform"
        apt-get update
        apt-get install -y wget unzip 
        apt-get clean all
        wget https://releases.hashicorp.com/terraform/"$TERRAFORM_VERSION"/terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
        unzip terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
        chmod 775 terraform
        # Cache the terraform binary
        cp terraform /tmp/terraform_binaries/terraform_$TERRAFORM_VERSION
        mv terraform /usr/local/bin/
        rm terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
      fi
      terraform --version
      
      # Check if Checkov is already installed (won't be perfect but helps)
      if ! command -v checkov &> /dev/null; then
        echo "Installing Checkov components"
        apt-get install python -y
        pip install --no-input checkov
        pip install --upgrade --no-input urllib3
      else
        echo "Checkov already installed"
      fi
      
      # Install jq if not already installed
      if ! command -v jq &> /dev/null; then
        apt-get install jq -y
      fi
  pre_build:
    on-failure: ABORT
    commands: |
      if [ "$STAGE_TYPE" = "plan" ]; then
        echo "Running Terraform plan"
        ls -lathr;
        terraform init;
        terraform validate;
        terraform plan -out tfplan;
      elif [ "$STAGE_TYPE" = "scan" ]; then
        echo "Plan Scan"
        ls -lathr;
        terraform init;
        terraform plan -out tfplan;
        terraform show -json tfplan | jq '.' > tfplan.json;
        checkov -f tfplan.json;
      else
        echo "No Plan, or Scan Stages"
      fi
  build:
    on-failure: ABORT
    commands: |
      if [ "$STAGE_TYPE" = "apply" ]; then
        echo  "Apply stage";
        ls -lathr;
        terraform apply tfplan;
      else
        echo "No Apply stage";
      fi
  post_build:
    on-failure: CONTINUE
    commands: |
    
      if [ "$STAGE_TYPE" = "apply" ]; then
        echo "Fetching provisioning details"
       terraform show -json tfplan > tfplan.json
       apt-get install -y jq
        echo "print out terrafrom version and json format version"
        jq '.terraform_version, .format_version' tfplan.json
        echo ""
        echo "print out provider config"
        jq '.configuration.provider_config' tfplan.json
        echo ""
        echo "print out resource config"
        jq '.configuration.root_module.resources' tfplan.json
        echo ""
        echo "print out outputs"
       jq '.outputs' tfplan.json
       echo ""
       echo "print out resource changes"
       jq '.resource_changes' tfplan.json
       echo ""
       echo "print out resource config"
        jq '.configuration.root_module.resources' tfplan.json
        echo ""
        echo "print out lock file configuration"
         jq '.configuration.lock_version' tfplan.json
      fi
artifacts:
  files:
    - '**/*'
    - 'tfplan.json'       
  base-directory: '.'

cache:
  paths:
    - '.terraform/**/*'
    - '/var/cache/apt/archives/**/*'     
    - '/root/.cache/pip/**/*'                  
    - '/tmp/terraform_binaries/'               
    - '/tmp/pip-cache/**/*'
